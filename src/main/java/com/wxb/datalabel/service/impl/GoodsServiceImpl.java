package com.wxb.datalabel.service.impl;

import com.wxb.datalabel.dao.GoodsMapper;
import com.wxb.datalabel.entity.Goods;
import com.wxb.datalabel.service.GoodsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import java.util.List;

@Service
public class GoodsServiceImpl implements GoodsService {

    @Autowired
    private GoodsMapper goodsMapper;

    /**
     * 查询所有商品
     * @return
     */
    @Override
    public List<Goods> findAll() {
        return goodsMapper.selectAll();
    }

    /**
     * 根据品牌分批查询
     * @param brand
     * @return
     */
    @Override
    public List<Goods> findByBrand(String brand) {
        return goodsMapper.selectByBrand(brand);
    }

    /**
     * 增加商品
     * @param goods
     * @return
     */
    @Override
    public int addGoods(Goods goods) {
        Goods goods1 = goodsMapper.selectByName(goods.getName());
        if (goods1 != null){
            throw new IllegalArgumentException("数据库中已经有该商品，请重新添加");
        }
        return goodsMapper.addGoods(goods);
    }

    /**
     * 从表中查询映射词典
     * @param name
     * @return
     */
    @Override
    public String findMapValue(String name) {
        if (name.isEmpty() && name == null){
            throw new IllegalArgumentException("查询的商品名字不能为空");
        }
        Goods goods = goodsMapper.selectByName(name);
        String mapValue = goods.getMapValue();
        return mapValue;
    }

    /**
     * 更新商品系列字段
     * @param name
     * @return
     */
    @Override
    public int updateSeries(String name) {
        if (name == null){
            throw new IllegalArgumentException("商品名字不能为空");
        }
        String series = null;
        Goods goods = goodsMapper.selectByName(name);
        if (goods == null){
            throw new IllegalArgumentException("该商品未加入数据库中");
        }
        if (goods.getBrand().equals("其他")){
            series = "其他";
        } else if (name.contains(goods.getFirstChar())){
            series = goods.getMapValue();
        } else if (name.contains(goods.getSecondChar()) && name.contains(goods.getThirdChar()) && name.contains(goods.getFourthChar())){
            series = goods.getMapValue();
        } else if (goods.getBrand() != null && series == null){
            series = goods.getBrand() + "其他";
        }
        return goodsMapper.updateSeries(goods.getId(), series);
    }
}
