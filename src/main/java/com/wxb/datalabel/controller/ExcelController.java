package com.wxb.datalabel.controller;


import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

@RestController
public class ExcelController {

    @PostMapping("/splitExcel")
    public void excel(String file) throws IOException, InvalidFormatException {
        String data = "";
        //读取excel文件
        File xlsFile = new File(file);
        // 获得工作簿
        Workbook workbook = WorkbookFactory.create(xlsFile);
        Sheet sheet = workbook.getSheetAt(0);
        // 获得行数
        int rows = sheet.getLastRowNum() + 1;
        // 获得列数，先获得一行，在得到该行列数
        Row tmp = sheet.getRow(0);
        int cols = tmp.getPhysicalNumberOfCells();

        // 创建工作薄
        HSSFWorkbook newWork = new HSSFWorkbook();
        // 创建工作表
        HSSFSheet newSheet = newWork.createSheet("sheet1");
        // 读取数据
        for (int row = 0; row < rows; row++) {
            Row r = sheet.getRow(row);

            HSSFRow newRows = newSheet.createRow(row);

            for (int col = 0; col < cols; col++) {
                r.getCell(col).setCellType(Cell.CELL_TYPE_STRING);
                data = data.concat(r.getCell(col).getStringCellValue());
            }
            if (data.contains("河南")){
                for (int col = 0; col < cols; col++) {
                    r.getCell(col).setCellType(Cell.CELL_TYPE_STRING);
                    System.out.printf("%10s", r.getCell(col).getStringCellValue());
                    newRows.createCell(col).setCellValue(r.getCell(col).getStringCellValue());
                }
            }
            data = "";
            System.out.println();
        }
            File newFile = new File("D:\\ideaProject\\pentest\\datalabel\\src\\main\\resources\\xlsx\\" + "河南" + ".xlsx");
            FileOutputStream xlsStream = new FileOutputStream(newFile);
            newWork.write(xlsStream);

            //存储所有excel在集合中，调用zipDownload方法即可压缩
    }
    //多个excel导出zip
    public static void zipDownload(List<Workbook> list, HttpServletResponse response) {
        ServletOutputStream outputStream = null;
        try {
            // 文件名称
            String fileName = "excel" + ".zip";
            // 编码
            response.setHeader("content-Type", "application/vnd.ms-excel");
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Disposition",
                    "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));
            // 跨域设置
            response.addHeader("Access-Control-Expose-Headers", "*");
            outputStream = response.getOutputStream();
            ZipOutputStream zipOutputStream = new ZipOutputStream(outputStream);
            // 循环处理 Workbook
            for (Workbook sheets : list) {
                zipOutputStream.putNextEntry(new ZipEntry(
                        sheets.getSheetName(0).replace(" ", "").concat(".xlsx")));
                sheets.write(zipOutputStream);
            }
            zipOutputStream.flush();
            zipOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @PostMapping("/skuSplit")
    public void skuExcel(String file) throws IOException, InvalidFormatException {
        //获取sku数据
        List<String> datas = getColumn(file, 6);
        //分裂sku数据
        for (String data : datas){
            String[] split = data.split(",");
            for (int i = 0; i < split.length; i++){
                System.out.println(split[i]);
            }
        }
        //将数据写入excel
    }
    //读取指定列的数据
    public static List<String> getColumn(String file, int columnIndex) throws IOException, InvalidFormatException {
        //读取excel文件
        File xlsFile = new File(file);
        List<String> columnList=new ArrayList<>();
        Workbook book = WorkbookFactory.create(xlsFile);
        Sheet sheet = book.getSheetAt(0);
        for (int runNum =0; runNum <=sheet.getLastRowNum();runNum++) {
            Row row = sheet.getRow(runNum);
                int minColIx = row.getFirstCellNum();
                int maxColIx = row.getLastCellNum();
                //遍历该行，获取每个cell元素
                for (int colIx = minColIx; colIx < maxColIx; colIx++) {
                    Cell cell = row.getCell(colIx);
                    //获取指定的一列
                    if (cell.getColumnIndex() == columnIndex) {
                        columnList.add(cell.getStringCellValue());
                    }
                }
        }
        return columnList;
    }
}
